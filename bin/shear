#!/usr/bin/env node
const path    = require('path');
const yargs   = require('yargs');
const prune   = require('../src/prune.js');
const inspect = require('../src/inspect.js');
const dynamic = require('../src/dynamic.js');

const argv = yargs.usage('Usage: $0 <command> [options]')
    .command({
        command: 'prune',
        desc: 'Find potentially unused templates.',
        builder: (yargs) => yargs
            .option('t', {
                alias: 'templates',
                default: ['**/*.twig'],
                demandOption: false,
                desc: 'Template file patterns to find usage of.',
                type: 'array',
                coerce: (templates) => templates.map((pattern) => {
                    return path.resolve(process.cwd(), pattern);
                })
            })
            .option('s', {
                alias: 'source',
                default: ['**/*.twig'],
                demandOption: false,
                desc: 'Template file patterns to search in.',
                type: 'array',
                coerce: (source) => source.map((pattern) => {
                    return path.resolve(process.cwd(), pattern);
                })
            }),
        handler: (argv) => {
            prune(argv.templates, argv.source);
        },
    })
    .command({
        command: 'inspect <template>',
        desc: 'Inspect a specific template file.',
        builder: (yargs) => yargs
            .positional('template', {
                type: 'string',
            })
            .option('s', {
                alias: 'source',
                demandOption: false,
                default: ['**/*.twig'],
                type: 'array',
                coerce: (source) => source.map((pattern) => {
                    return path.resolve(process.cwd(), pattern);
                })
            }),
        handler: (argv) => {
            inspect(argv.template, argv.source);
        },
    })
    .command({
        command: 'dynamic',
        desc: 'Find dynamic inclusions.',
        builder: (yargs) => yargs
            .option('s', {
                alias: 'source',
                demandOption: false,
                default: ['**/*.twig'],
                type: 'array',
                coerce: (source) => source.map((pattern) => {
                    return path.resolve(process.cwd(), pattern);
                })
            }),
        handler: (argv) => {
            dynamic(argv.source);
        },
    })
    .help('h')
    .alias('h', 'help')
    .version('h')
    .alias('v', 'version')
    .argv;

// console.log(argv);
